<?xml-model href="http://docbook.org/xml/5.0/rng/docbook.rng"
        schematypens="http://relaxng.org/ns/structure/1.0"?><?xml-model href="http://docbook.org/xml/5.0/rng/docbook.rng" type="application/xml"
        schematypens="http://purl.oclc.org/dsdl/schematron"?>
<article version="5.0" xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink">
    <info>
        <title>Tuning the Database</title>
        <date>2Q19</date>
        <keywordset>
            <keyword>operations</keyword>
            <keyword>application-development</keyword>
        </keywordset>
    </info>

    <!-- ================================================================== -->

    <para>This article describes strategies for improving the performance of eXist-db and optimizing
        its efficiency. It covers subjects that constrain performance, from memory and cache
        settings to the way a query is constructed. </para>

    <!-- ================================================================== -->

    <sect1 xml:id="memory">
        <title>Memory settings</title>
        <para>Java always limits the maximum amount of memory available to a process. So eXist-db
            will not automatically use all of the available memory on your machine. </para>
        <para>The maximum amount of memory Java will allocate is determined by the
                <literal>-Xmx</literal> parameter passed to Java on the command line. </para>
        <para>When eXist-db is started via the graphical launcher or via one of the shell or batch
            scripts, memory settings are read from the file
                <literal>$EXIST_HOME/etc/launcher.properties</literal>:</para>
        <programlisting xlink:href="listings/listing-1.txt"/>
        <para>For <emphasis>Unix/Linux</emphasis> systems, this is done in the <code>.sh</code>
            files, for instance  <literal>$EXIST_HOME/bin/startup.sh</literal>, from the
                <literal>JAVA_OPTS</literal> evironment variable. You can override those variables
            globally in your own shell.</para>
        <para>On <emphasis>Windows</emphasis>,this is done in the main <code>.bat</code> files, for
            instance <literal>$EXIST_HOME\bin\startup.bat</literal>.</para>
    </sect1>

    <!--================================================================== -->

    <sect1 xml:id="cache">
        <title>Cache settings</title>

        <para>Each of the core database files and indexes has a page cache. The main purpose of this
            cache is to make sure that the most frequently used pages of these files are kept in
            memory. If a file's cache is too small, eXist starts to unload pages, only to reload
            them a few moment later. This "trashing effect" results in an immediate performance
            drop, in particular while indexing documents.</para>
        <para>All caches share a single memory pool, whose size is determined by the attribute
                <literal>cacheSize</literal> in the <tag>db-connection</tag> section of
                <literal>$EXIST_HOME/etc/conf.xml</literal>:</para>
        <programlisting language="xml" xlink:href="listings/listing-3.txt"/>
        <para>The global cache manager will dynamically grant more memory to caches while they are
            under load and free memory used by idle caches.</para>
        <para>The default setting for <literal>cacheSize</literal> is very conservative (48M). It is
            ok for smaller databases, but you may soon experience a performance drop when indexing
            more than several 100M of XML data. Consider increasing <literal>cacheSize</literal> up
            to approximately 1/3 of the main memory available to Java (determined by the
            <literal>-Xmx</literal> parameter passed to the Java command line). If you are running
            eXist-db with other web applications in the same servlet engine, you may need to choose
            a smaller setting.</para>
        <warning>
            <para>Running out of memory will crash the database, be careful!</para>
        </warning>
        <para>The <literal>cacheSize</literal> is mostly relevant for storing/updating data. The
            effect on query speed is negligible (unless the index caches are much too small).</para>
        <para>If you continue to experience performance issues while storing data, revisit your
            index configuration. Removing unused indexes provides more room to the other indexes. In
            particular, the full text index can grow very fast until it becomes a bottleneck. Try to
            disable the default full text index (see below).</para>
        <para>The <literal>nodesBuffer</literal> attribute can be used to set eXist-db's temporary
            internal buffer to a fixed size. This buffer is used during indexing to cache nodes
            before they are flushed to disk. The default setting (<code>nodesBuffer="-1"</code>)
            means use as much memory as is available. This can be problematic if you store large
            documents in a multi-user environment. For a production server, it is recommended to set
            <code>nodesBuffer</code> to <code>1000</code> or less when there are many concurrent
            write operations.</para>
    </sect1>

    <!-- ================================================================== -->

    <sect1 xml:id="idx-conf">
        <title>Index configuration</title>



        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

        <sect2 xml:id="no-default">
            <title>Don't rely on the default behaviour</title>

            <para>eXist-db does <emphasis>not</emphasis> index element or attribute values by
                default. For example, assume the following query without an index:</para>
            <programlisting>//SPEECH[SPEAKER = "HAMLET"]</programlisting>
            <para>The query engine will perform a full scan over all <tag>SPEAKER</tag> elements in
                the database. This is very slow and limits concurrency. You should at least create a
                global index definition (in
                <literal>/db/system/config/db/collection.xconf</literal>) and add range indexes for
                the most frequently used comparisons.</para>
        </sect2>

        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

        <sect2 xml:id="idxdefs">
            <title>Prefer simple index definitions</title>

            <para>Keeping your <link xlink:href="indexing">index definitions</link> simple makes it
                easier for the query optimizer to resolve dependencies. </para>
            <para>In particular, avoid context-dependant index definitions unless you really have a
                reason to use them. A context-dependant index is defined on a path like
                <code>/book/chapter/title</code>. General indexes are defined on a simple element or
                attribute qname. For instance:</para>
            <programlisting language="xquery" xlink:href="listings/listing-6.xml"/>
            <para>Defining indexes on qnames may result in a larger index, but allows the query
                engine to apply all available optimization techniques. This can improve query times
                by an order of magnitude. Replacing a context-dependant index by a simple index on
                qname can therefore result in a performance boost.</para>
        </sect2>

        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

        <sect2 xml:id="range">
            <title>Use range indexes on strongly typed data or short strings</title>

            <para>Range indexes work with the standard XQuery operators and string functions. For
                instance:</para>
            <programlisting language="xquery">//book[year = 2000]</programlisting>
            <para>This will always be slow without an index: eXist-db scans over every
                <tag>year</tag> element in the db, casting its string value to an integer.</para>
            <para>For queries on string content, range indexes work well for exact comparisons
                (<code>author = 'Joe Doe'</code>) or regular expressions (<code>matches(author,
                "^Joe.*")</code>) You can also use a full text index for the latter. </para>
            <para>Range indexes on strings are by default <emphasis>case-sensitive</emphasis>. To be
                more precise: they are sensitive to the default <link condition="_blank"
                xlink:href="https://en.wikipedia.org/wiki/Collation">collation</link>. If you need
                case-insensitive queries, consider using an ngram index.</para>
        </sect2>

        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

        <sect2 xml:id="ngram">
            <title>Consider an n-gram index for exact substring queries on longer text
                sequences</title>

            <para>While range indexes tend to become slow for substring queries (like
                <code>contains(title, "XSLT 2.0")</code>), an n-gram index is nearly as fast as a
                full text index. It also indexes whitespace and punctuation and is
                <emphasis>case-insensitive</emphasis>. </para>
            <para>For example, <code>ngram:contains(title, "XSLT 2.0")</code> will only match titles
                containing the <emphasis>exact</emphasis> phrase "XSLT 2.0". </para>
        </sect2>

        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

        <sect2 xml:id="no-punct">
            <title>Choose a full-text index for tokenizable text where whitespace/punctuation is
                mostly irrelevant</title>

            <para>The full text index is very fast and should be used whenever you need to query for
                a sequence of separate words or tokens in a longer text. It might even be faster to
                post-process the returned node set and filter out wrong matches than using a,
                usually much slower, regular expression!</para>

        </sect2>
    </sect1>

    <!-- ================================================================== -->

    <sect1 xml:id="write">
        <title>Writing Queries</title>

        <sect2 xml:id="short">
            <title>Prefer short paths</title>

            <para>eXist-db uses internal indexes to directly locate an element or attribute by name.
                It doesn't need to <link condition="_blank"
                xlink:href="https://en.wikipedia.org/wiki/Tree_traversal">traverse</link> the
                document tree. This means that direct selection of a node through a single
                descendant step is <emphasis>faster</emphasis> than walking the child axis. For
                example:</para>
            <programlisting language="xquery">a/b/c/d/e/f</programlisting>
            <para>This will be <emphasis>slower</emphasis> than</para>
            <programlisting language="xquery">a//f</programlisting>
            <para>The first expression requires 6 (!) index lookups where the second just needs two.
                The same applies to the ancestor axis, for instance
                <code>f/ancestor::a</code>.</para>
        </sect2>

        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

        <sect2 xml:id="selective">
            <title>Always process the most selective filter/expression first</title>

            <para>If you need multiple steps to select nodes from a larger node set, try to process
                the most selective steps first. The earlier you reduce the node set to process, the
                faster your query. </para>
            <para>For example, assume we have to find publications written by "Bjarne Stroustrup",
                published after the year 2000:</para>
            <programlisting language="xquery">/dblp/*[year &gt; 2000][author = 'Bjarne Stroustrup']</programlisting>
            <para>The database has 568824 records matching <code>year &gt; 2000</code>, but only 41
                of them were written by Stroustrup. Moving the filter on the author to the front of
                the expression results in better performance:</para>
            <programlisting language="xquery">/dblp/*[author = 'Bjarne Stroustrup'][year &gt; 2000]</programlisting>
        </sect2>

        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

        <sect2 xml:id="avoid-nested">
            <title>Avoid unnecessary nested filters</title>

            <para>Nesting filters in an XPath expression is often required and eXist-db will process
                them correctly. However, unnecessary nesting should be avoided because it has a
                negative impact on the query optimizer.</para>
            <para>For example: <code>//A[B[C = "D"]]</code> could also be written as <code>//A[B/C =
                "D"]</code> without changing the result. The variant with only one filter is easier
                to optimize for eXist-db.</para>
            <para>Likewise, if you are calling one of the optimized functions
                (<code>contains</code>, <code>matches</code>, <code>ft:query</code>, etc.), make
                sure you do not nest them, unless really required. For instance
                <code>//A[B/C[contains(., "D")]]</code> can be rewritten as <code>//A[contains(B/C,
                "D")]</code>.</para>

        </sect2>

        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

        <sect2 xml:id="allow-large">
            <title>Allow eXist-db to process large node sets in one step</title>

            <para>The query engine is optimized to process a path expression in a single operation.
                For instance:</para>
            <programlisting language="xquery">//A/*[B = 'C']</programlisting>
            <para>This is evaluated in a single operation for all context items. It doesn't make a
                difference if the input set comes from a single large document, includes all the
                documents in a specific collection or even the entire database. The logic of the
                operation remains the same.</para>
            <para>However, "bad" queries can force the query engine to partition the input sequence
                and process it in an item-by-item mode. For example, most function calls will force
                the query engine into item-by-item mode:</para>
            <programlisting language="xquery">//A/*[f:process(B) = 'C']</programlisting>
            <para>The query engine needs to call a (non-optimized) function for each <tag>B</tag>
                and will therefore process the entire comparison once for every context item.</para>
            <para>There are functions to which the above does not apply. This includes most
                functions which operate on indexes, e.g. <code>contains</code>,
                <code>matches</code>, <code>starts-with</code>, <code>ngram:contains</code>, etc.
                These calls are optimized, eXist-db only needs to call them once to process the
                entire context set. For example, using <code>ngram:contains</code> like in
                <code>//A/*[ngram:contains(B, 'C')]</code> is ok. But
                <code>//A/*[ngram:contains(f:process(B), 'C')]</code> will again force eXist-db into
                step-by-step evaluation.</para>

        </sect2>

        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

        <sect2 xml:id="xpath">
            <title>Prefer XPath predicates over where expressions</title>

            <para>This is a variation of what was discussed above. Many users formulate SQL-style
                queries using an explicit "where" clause:</para>

            <programlisting language="xquery" xlink:href="listings/listing-21.txt"/>
            <para>This could be rewritten as:</para>

            <programlisting language="xquery" xlink:href="listings/listing-22.txt"/>
            <para>The "<code>for … where</code>" expression forces the query engine into a
                step-by-step iteration over the input sequence, testing each instance of
                <code>$e</code> against the <code>where</code> expression. Any possible
                optimizations are lost.</para>
            <para>However, the XPath predicate expression can be processed in one single step,
                making best use of available indexes. There are of course cases which cannot be
                handled without using <code>where</code> (for instance joins between multiple
                documents), but you don't use <code>where</code> if you can replace it by a simple
                XPath predicate.</para>
            <para>The query engine will always <emphasis>try</emphasis> to process a
                <code>where</code> clause like an equivalent XPath with predicate, but it only
                detects the simple cases.</para>
        </sect2>

        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

        <sect2 xml:id="general-comparison">
            <title>Use general comparisons to compare an item to a list of alternatives</title>

            <para>General comparisons are handy if you need to compare something to multiple values.
                For example, you could use an "or" to find all <tag>b</tag> children whose string
                value is either <code>"c"</code> or <code>"d"</code>:</para>
            <programlisting language="xquery">//a[b eq 'c' or b eq 'd']</programlisting>
            <para>A shorter and more efficient way to express this is:</para>
            <programlisting language="xquery">//a[b = ('c', 'd')]</programlisting>
            <para>If an index is defined on <tag>b</tag>, eXist-db will need only one index lookup
                to find all b's matching the comparison. The equivalent "or" expression needs two
                separate index lookups.</para>
        </sect2>

        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

        <sect2 xml:id="group-by">
            <title>Use "group by"</title>

            <para>The XQuery 3.0 <code>group by</code> feature is more efficient than using the
                <code>distinct-values</code> function. For example, to order the results of a query
                by the value of the child element <tag>SPEAKER</tag>:</para>
            <programlisting language="xquery" xlink:href="listings/listing-25.txt"/>
            <para>The XQuery 3.0 variant with <code>group by</code> is much more efficient:</para>
            <programlisting language="xquery" xlink:href="listings/listing-26.txt"/>
        </sect2>

        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

        <sect2 xml:id="multiple-collections">
            <title>Querying multiple collections</title>

            <para>You could use a <code>for</code> loop to query over multiple collections on the
                same level in the collection hierarchy. However, this forces the query engine to
                process the remaining expression once for each collection. It is more efficient to
                construct the initial node set once and use it as input for the main expression. For
                example:</para>

            <programlisting language="xquery" xlink:href="listings/listing-27.txt"/>
            <para>This will be less efficient than:</para>

            <programlisting language="xquery" xlink:href="listings/listing-28.txt"/>
        </sect2>

        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

        <sect2 xml:id="ancestor">
            <title>Use the ancestor or parent axis instead of a top-down approach</title>

            <para>eXist-db can navigate the ancestor axis as fast as the descendant axis. It can
                therefore be more efficient to build a query bottom-up instead of top-down. Here's a
                top-down example:</para>

            <programlisting language="xquery" xlink:href="listings/listing-29.txt"/>
            <para>This query walks through a set of sections and queries each of them for paragraphs
                containing the string "XML". It then outputs the title of the section, followed by
                the matching paragraphs. Note that it will also return the title of all sections
                which do not have any matches.</para>
            <para>The nested <code>for</code> loop forces the query engine into a step-by-step
                iteration over the section elements. We can avoid this by using a bottom-up
                approach:</para>
            <programlisting language="xquery" xlink:href="listings/listing-30.txt"/>
        </sect2>

        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

        <sect2 xml:id="match">
            <title>Match regular expressions against the start of a string</title>

            <para>The function <code>fn:matches</code> returns <code>true</code> if a substring of
                its first argument matches the regular expression. The query engine needs to scan
                all index entries, as the match could be at any position of an entry.</para>
            <para>You can reduce the range of entries scanned by anchoring your pattern at the start
                of a string:</para>
            <programlisting language="xquery">fn:matches($str, "^XQuery")</programlisting>
        </sect2>

        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

        <sect2 xml:id="structural">
            <title>Use fn:id to lookup xml:id attributes</title>

            <para>eXist-db automatically indexes all <code>xml:id</code> attributes and other
                attributes with type <code>ID</code> as declared in a DTD (if validation is
                enabled). This automatic index is used by the standard <code>id</code> functions and
                provides a fast way to look up an element. For example,
                <code>id("sect1")/head</code> works through a fast index lookup.</para>
            <para>However, the equivalent expression <code>//section[@xml:id = 'sect1']/head</code>
                will <emphasis>not</emphasis> use the <code>id</code> index.</para>
            <para>Some users have reported that larger <code>xml:id</code> values have a negative
                performance impact. </para>
        </sect2>

        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

        <sect2 xml:id="defer-output">
            <title>Defer output generation until really needed</title>

            <para>When working with large result sets within a query, it is important to understand
                the <emphasis>differences between stored nodes and in-memory XML</emphasis>: if a
                node set consists of nodes stored in the database, eXist-db will, in most cases,
                never load these into memory. It uses lightweight references instead for most
                processing steps. Even large node sets do not consume too much memory.</para>
            <para>However, all new XML nodes created within an XQuery reside in memory. The
                constructed XML fragments need to fit into the memory available to the Java VM. If a
                query generates too many nodes, the XQuery watchdog (if enabled) may step in and
                kill it.</para>
            <para>A typical scenario: a query selects a large number of documents from the database
                and then iterates through each to generate some HTML output for display. However,
                only the first 10 results are returned to the user, the rest is stored into an HTTP
                session for later viewing. In this case it is important to limit the HTML generation
                to <emphasis>those items which are actually returned</emphasis>. Though the source
                XML documents may be large, eXist-db will not load them into memory. Storing those
                references into a session does not consume much memory:</para>

            <programlisting language="xquery" xlink:href="listings/listing-34.txt"/>
            <para>Also note that eXist-db uses <emphasis>lazy evaluation</emphasis> when
                constructing new XML fragments. For example:</para>
            <programlisting language="xquery">&lt;book&gt;{$node/title}&lt;/book&gt;</programlisting>
            <para>Assuming that <code>$node</code> references a node in the database, the query
                engine will not copy <code>$node/title</code> into the constructed <tag>book</tag>
                element. Only a reference is inserted. The reference will not be expanded until the
                fragment is serialized or queried.</para>
        </sect2>
    </sect1>
</article>
