<?xml-model href="http://docbook.org/xml/5.0/rng/docbook.rng"
        schematypens="http://relaxng.org/ns/structure/1.0"?><?xml-model href="http://docbook.org/xml/5.0/rng/docbook.rng" type="application/xml"
        schematypens="http://purl.oclc.org/dsdl/schematron"?><article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
  <info>
    <title>URL Rewriting</title>
    <date>1Q18</date>
    <keywordset>
      <keyword>application-development</keyword>
    </keywordset>
  </info>

  <!-- ================================================================== -->

  <para>This article describes the URL rewriting mechanism in eXist-db.</para>
  <warning>
    <para>This article must be rewritten completely. It contains a lot of outdated
      information. Be careful!</para>
  </warning>

  <!-- ================================================================== -->

  <sect1>
    <title>Basics</title>

    <para>URL rewriting is done by a standard Java servlet filter called
        <code>XQueryURLRewrite</code>. Its main job is to intercept incoming requests and forward
      them to the appropriate handlers, which are again standard servlets. In fact, there's nothing
      eXist-specific to the servlet filter, except that it uses XQuery scripts to configure the
      forwarding and URL rewriting. Like any other servlet filter, it is configured in
        <literal>webapp/WEB-INF/web.xml</literal>.</para>
    <para>A controller XQuery is executed once for every requests. It must return an XML fragment,
      which tells the servlet filter how to proceed with the request. The returned XML fragment can
      range from simply define forwarding up to describing complex pipelines involving multiple
      steps.</para>
    <para>The main advantage of using XQuery for the controller is that we have the whole power of
      the language available. The controller can look at request parameters or headers, add new
      parameters or attributes, rewrite the request URI or access the database. There's basically no
      limit.</para>
  </sect1>

  <!-- ================================================================== -->

  <sect1>
    <title>URL Rewriting</title>

    <para>When designing RESTful web applications, a common rule is to provide meaningful URIs to
      the user. For example, our eXist wiki implements a hierarchical document space. The user can
      directly browse to a document by entering the path to it into the browser's location bar. The
      URL <link xlink:href="http://atomic.exist-db.org/HowTo/OxygenXML/">http://atomic.exist-db.org/HowTo/OxygenXML/eXistXmlRpcChanged</link> will directly lead to
      the corresponding document.</para>
    <para>Internally all document views are handled by the same XQuery script. Above URL will be
      forwarded to an XQuery called <literal>index.xql</literal> as follows:</para>
    <programlisting>index.xql?feed=HowTo/OxygenXML/&amp;ref=eXistXmlRpcChanged</programlisting>
    <para>The XQuery code which does the rewrite magic is shown below:</para>
    <programlisting language="xquery" xlink:href="listings/listing-2.txt"/>

    <para>The <tag>forward</tag> element tells <code>XQueryURLRewrite</code> to pass the request to
      the specified URL. The forwarding is done via the <literal>RequestDispatcher</literal> of the
      servlet engine and is thus invisible to the user. </para>
    <para>Relative URLs within forward or redirect elements are interpreted relative to the request
      URI, absolute paths relative to the root of the current controller hierarchy. If the
      controller which processes the request is stored in the database, all absolute and relative
      paths will be resolved against the database. This is explained in more detail below.</para>
    <para>If you want the user to see the rewritten URL, replace the <tag>forward</tag> action with
      a <tag>redirect</tag>. A common use for <tag>redirect</tag> is to send the user to a default
      page:</para>
    <programlisting language="xquery" xlink:href="listings/listing-3.txt"/>

    <para>If no action is specified within the dispatch element, the request will be passed through
      the filter chain and handled normally. The same happens if the action is the <tag>ignore</tag>
      element. For example, the simplest controller script consist of a single ignore:</para>
    <programlisting language="xml" xlink:href="listings/listing-4.xml"/>


    <note>
      <para>It is important to understand that only one (!) controller will ever be applied to a
        given request. It is not possible to forward from one controller to another (or to the
        same). Once you either ignored or forwarded a request in the controller, it will be passed
        to the servlet which handles it or, if it references a resource, it will be processed by the
        servlet engine itself. The controller will <emphasis>not</emphasis> be called again for the
        same request.</para>
      <para>Redirects are different in this respect: they cause the client (the web browser) to send
        a second request. This will again be filtered by <code>XQueryURLRewrite</code>. It is
        therefore possible to create redirect loops this way!</para>
    </note>
  </sect1>

  <!-- ================================================================== -->

  <sect1>
    <title>Variables</title>

    <para>Within a <code>controller.xql</code> file, you have access to the entire XQuery function
      library, including the functions in the <code>request</code>, <code>response</code> and
        <code>session</code> modules. You could therefore use a function like
        <literal>request:get-uri()</literal> to get the current URI of the request. However, to
      simplify things, <code>XQueryURLRewrite</code> passes a few variables to the controller
      script:</para>
    <variablelist spacing="compact">
      <varlistentry>
        <term><code>exist:path</code></term>
        <listitem>
          <para>The last part of the request URI after the section leading to the controller. </para>
          <para>For instance: If the resource <literal>example.xml</literal> resides within the same
            directory as the controller query, <literal>$exist:path</literal> will be
              <literal>/example.xml</literal>.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>exist:resource</term>
        <listitem>
          <para>The section of the URI after the last <literal>/</literal>, usually pointing to a
            resource. </para>
          <para>For instance: <literal>example.xml</literal>.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><code>exist:controller</code></term>
        <listitem>
          <para>The part of the URI leading to the current controller script.</para>
          <para>For example: if the request path is <literal>/xquery/test.xql</literal> and the
            controller is in the <literal>xquery</literal> collection,
              <literal>$exist:controller</literal> will contain <literal>/xquery</literal>.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><code>exist:prefix</code></term>
        <listitem>
          <para>If the current controller hierarchy is mapped to a certain path prefix,
              <literal>$exist:prefix</literal> returns that prefix.</para>
          <para> For example: the default configuration maps the path <literal>/tools</literal> to a
            collection in the database (see below). In this case, <literal>$exist:prefix</literal>
            would contain <literal>/tools</literal>.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><code>exist:root</code></term>
        <listitem>
          <para>The root of the current controller hierarchy. This may either point to the file
            system or to a collection in the database. Use this variable to locate resources
            relative to the root of the application.</para>
          <para> For example: assume you want to process a request using stylesheet
              <literal>db2xhtml.xsl</literal>, which could <emphasis>either</emphasis> be stored in
            the <literal>/stylesheets</literal> directory in the root of the webapp or, if the app
            is running from within the database, the corresponding <literal>/stylesheets</literal>
            collection. You want your app to be able to run from either location. The solution is to
            use <literal>exist:root</literal>:</para>
          <programlisting language="xml" xlink:href="listings/listing-5.xml"/>
        </listitem>
      </varlistentry>
    </variablelist>
    <para>To summarize: if the request path is
        <literal>/exist/tools/sandbox/get-examples.xql</literal>:</para>
    <table>
      <title>Table title</title>
      <tgroup cols="2">
        <colspec/>
        <colspec/>
        <thead>
          <row>
            <entry>Variable</entry>
            <entry>Contents</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para><literal>$exist:prefix</literal></para>
            </entry>
            <entry>
              <para><literal>/tools</literal></para>
            </entry>
          </row>
          <row>
            <entry>
              <para><literal>$exist:controller</literal></para>
            </entry>
            <entry>
              <para><literal>/sandbox</literal></para>
            </entry>
          </row>
          <row>
            <entry>
              <para><literal>$exist:path</literal></para>
            </entry>
            <entry>
              <para><literal>/get-examples.xql</literal></para>
            </entry>
          </row>
          <row>
            <entry>
              <para><literal>$exist:resource</literal></para>
            </entry>
            <entry>
              <para><literal>get-examples.xml</literal></para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>You do not need to explicitly declare the variables or the namespace. However you can add
      an external declaration for these variables at the top of your XQuery. For instance:</para>
    <programlisting language="xquery">declare variable $exist:path as external;</programlisting>
  </sect1>

  <!-- ================================================================== -->

  <sect1>
    <title>Locating Controller Scripts and Configuring Base Mappings</title>

    <para>By convention, the controller XQueries are called
      <literal>controller.xql</literal>.</para>
    <para>
      <code>XQueryURLRewrite</code> will try to guess the path to the controller by looking at the
      request path. </para>

    <para>In fact, one web application may have more than one controller hierarchy. For example, you
      may want to keep the main webapp within the file system, while some tools and scripts should
      be served from a database collection. This can be done by configuring two roots within the
        <literal>controller-config.xml</literal> file in <literal>webapp/WEB-INF</literal>.
        <literal>controller-config.xml</literal> defines the base mappings used by XQueryURLRewrite. </para>
    <para>It basically has two components:</para>
    <itemizedlist>
      <listitem>
        <para>
          <tag>forward</tag> actions which map patterns to servlets</para>
      </listitem>
      <listitem>
        <para>
          <tag>root</tag> elements define the root for a file system or db collection hierarchy
        </para>
      </listitem>
    </itemizedlist>
    <para>The <tag>forward</tag> tags specify path mappings for common servlets, similar to a
      servlet mapping in <literal>web.xml</literal>. The advantage is that XQueryURLRewrite becomes
      a single point of entry for the entire web application and we don't need to handle any of the
      servlet paths in the main controller. For example, if we registered a servlet mapping for
        <literal>/rest</literal> in <literal>web.xml</literal>, we would need to make sure that this
      path is ignored in our main <literal>controller.xql</literal>. However, if the mapping is done
      via <literal>controller-config.xml</literal>, it will already been known to XQueryURLRewrite
      and we don't need take care of the path in our controller.</para>
    <para>The <tag>root</tag> elements define the roots of a directory or database collection
      hierarchy, mapped to a certain base path. For example, the default
        <literal>controller-config.xml</literal> uses two roots:</para>
    <programlisting language="xml" xlink:href="listings/listing-7.txt"/>
    <para>This means that paths starting with <literal>/tools</literal> will be mapped to the
      collection hierarchy below <literal>/db/www</literal>. Everything else is handled by the catch
      all pattern pointing to the root directory of the webapp (by default corresponding to
        <literal>EXIST_HOME/webapp</literal>). For example, the URI</para>
    <programlisting>http://localhost:8080/exist/tools/admin/admin.xql</programlisting>
    <para>will be handled by the controller stored in database collection
        <literal>/db/www/admin/</literal> (if there is one) or will directly resolve to
        <literal>/db/www/admin/admin.xql</literal>. In this case, all relative or absolute URIs
      within the controller will be resolved against the database, not the file system. However,
      there's a possibility to escape this path interpretation, described <link xlink:href="#EXTERNAL_RESOURCES">below</link>.</para>
  </sect1>

  <!-- ================================================================== -->

  <sect1>
    <title>MVC and Pipelines</title>

    <para><code>XQueryURLRewrite</code> does more than just forward or redirect requests: the
      response can be processed by passing it to a pipeline of views. "Views" are again just plain
      Java servlets. The most common use of a view would be to post-processes the XML returned from
      the primary URL, either through another XQuery or an XSLT stylesheet
      (<code>XSLTServlet</code>). <code>XQueryURLRewrite</code> passes the HTTP response stream of
      the previous servlet to the HTTP request received by the next servlet. </para>
    <para>Views may also directly exchange information through the use of request attributes (more
      on that below).</para>

    <para>You define a view pipeline by adding a <tag>view</tag> element to the <tag>dispatch</tag>
      fragment returned by the controller. The <tag>view</tag> element is a wrapper around another
      sequence of <tag>forward</tag> or <tag>rewrite</tag> actions.</para>
    <para>For example, assume we have XML written in docbook format and want to show this as HTML by
      sending this through an XSLT stylesheet <literal>webapp/stylesheets/db2html.xsl</literal>.
      This can be done by returning the following <tag>dispatch</tag> fragment by
        <literal>controller.xql</literal>:</para>
    <programlisting language="xml" xlink:href="listings/listing-9.xml"/>
    <para>In this example there's no forwarding action except for the view So the request will be
      handled by the servlet engine the normal way. The response is then passed to
        <code>XSLTServlet</code>. A new HTTP POST request is created whose body is set to the
      response data of the previous step. <code>XSLTServlet</code> gets the path to the stylesheet
      from the request attribute <code>xslt.stylesheet</code> and applies it to the data.</para>
    <para>If any step in the pipeline generates an error or returns an HTTP status code &gt;= 400,
      the pipeline processing stops and the response is send back to the client immediately. The
      same happens if the first step returns with an HTTP status 304 (NOT MODIFIED), which indicates
      that the client can use the version it has cached.</para>
    <para>We can also pass a request through more than one view. The following fragment applies two
      stylesheets in sequence:</para>

    <programlisting language="xquery" xlink:href="listings/listing-10.txt"/>
    <para>The example also demonstrates how information can be passed between actions.
        <code>XQueryServlet</code> (which is called implicitly because the URL ends with
        <code>.xql</code>) can save the results of the called XQuery to a request attribute instead
      of writing them to the HTTP output stream. It does so if it finds a request attribute
        <literal>xquery.attribute</literal>, which should contain the name of the attribute the
      output should be saved to.</para>
    <para>In the example above, <literal>xquery.attribute</literal> is set to <code>model</code>.
      This causes <code>XQueryServlet</code> to fill the request attribute <literal>model</literal>
      with the results of the XQuery it executes. The query result will not be written to the HTTP
      response as you would normally expect, the HTTP response body will just be empty.</para>
    <para>Likewise, <code>XSLTServlet</code> can take its input from a request attribute instead of
      parsing the HTTP request body. The name of the request attribute should be given in attribute
        <literal>xslt.model</literal>. XSLTServlet discards the current request content (which is
      empty anyway) and uses the data in the attribute's value as input for the transformation
      process.</para>
    <para>XSLTServlet will always write to the HTTP response. The second invocation of XSLTServlet
      therefore needs to read its input from the HTTP request body which contains the response of
      the first servlet. Since request attributes are preserved throughout the entire pipeline, we
      need to clear the <literal>xslt.input</literal> with an explicit call to
      clear-attribute.</para>
    <para>What benefits does it have to exchange data through request attributes: We save one
      serialization step: <code>XQueryServlet</code> directly passes the node tree of its output as
      a valid XQuery value, so <code>XSLTServlet</code> does not need to parse it again.</para>
    <para>The advantages become more obvious if you have two or more XQueries which need to exchange
      information: XQuery 1 can use the XQuery extension function
        <code>request:set-attribute()</code> to save an arbitrary XQuery sequence to an attribute.
      XQuery 2 then calls <code>request:get-attribute()</code> to retrieve this value. It can
      directly access the data passed in from XQuery 1. No time is lost serializing/deserializing
      the data.</para>

    <para>Let's have a look at a more complex example: the XQuery sandbox web application needs to
      execute a user-supplied XQuery fragment. The results should be retrieved in an asynchronous
      way, so the user doesn't need to wait and the web interface remains usable.</para>
    <para>Older versions of the sandbox used the <literal>util:eval</literal> function to evaluate
      the query. However, this has side-effects because <code>util:eval</code> executes the query
      within the context of another query. Some features like module imports will not work properly
      this way. To avoid <code>util:eval</code>, the controller code below passes the user-supplied
      query to XQueryServlet first, then post-processes the returned result and stores it into a
      session for later use by the ajax frontend:</para>

    <programlisting language="xquery" xlink:href="listings/listing-11.txt"/>
    <para>The client passes the user-supplied query string in a request parameter, so the controller
      has to forward this to <code>XQueryServlet</code> somehow. <code>XQueryServlet</code> has an
      option to read the XQuery source from a request attribute, <literal>xquery.source</literal>.
      The query result will be saved to the attribute <literal>results</literal>. The second XQuery,
        <literal>session.xql</literal>, takes the result and stores it into a HTTP session,
      returning only the number of hits and the elapsed time.</para>
    <para>When called through retrieve, <literal>session.xql</literal> looks at parameter
        <literal>num</literal> and returns the item at the corresponding position from the query
      results stored in the HTTP session.</para>
  </sect1>

  <!-- ================================================================== -->

  <sect1>
    <title>Controller XML Format</title>

    <para>A controller XQuery is expected to return a single XML element: <tag>dispatch</tag> in the
      eXist namespace: <literal>http://exist.sourceforge.net/NS/exist</literal>. <tag>dispatch</tag>
      may contain a single action element, followed by an optional <tag>view</tag> element. Two
      action elements are currently allowed:</para>
    <variablelist spacing="compact">
      <varlistentry>
        <term><tag>redirect</tag></term>
        <listitem>
          <para>Redirects the client to another URL, indicating that the other URL must be used for
            subsequent requests. The URL to redirect to is given in attribute
            <literal>url</literal>. A redirect will be visible to the user.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><tag>forward</tag></term>
        <listitem>
          <para>Forwards the current request to another request path or servlet. The forwarding is
            done on the server only (via the <code>RequestDispatcher</code> of the servlet engine).
            The client can't see where the request was forwarded to.</para>
          <para>The request can either be forwarded to a servlet or to another request path,
            depending on which attribute is specified:</para>
          <variablelist spacing="compact">
            <varlistentry>
              <term><code>url</code></term>
              <listitem>
                <para>The new request path, which will be processed by the servlet engine in the
                  normal way, as if it were directly called. A relative path will be relative to the
                  current request path. Absolute path will be resolved relative to the current web
                  context. </para>
                <para>For example, if the current web context is <literal>/exist</literal> and the
                  supplied attribute reads <literal>url="/admin"</literal>, the resulting path will
                  be <literal>/exist/admin</literal>.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term><code>servlet</code></term>
              <listitem>
                <para>The name of a servlet as given in the <tag>servlet-name</tag> element in the
                  corresponding servlet definition of the web descriptor <literal>web.xml</literal>. </para>
                <para>For example, valid names within the eXist standard setup would be
                    <code>XQueryServlet</code> or <code>XSLTServlet</code>.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term><code>absolute</code></term>
              <listitem>
                <para>To be used in combination with <literal>url</literal>. If set to "yes", the
                  url will be interpreted as an absolute path within the current servlet context.
                  See <link xlink:href="#EXTERNAL_RESOURCES">below</link> for an example.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term><code>method</code></term>
              <listitem>
                <para>The HTTP method (POST, GET, PUT ...) to use when passing the request to the
                  pipeline step (does not apply to the first step). This is important if the servlet
                  or URL does not support all methods. The default method for pipeline steps in the
                  view section is always POST.</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>In addition to the action, an element <tag>cache-control</tag> may appear:</para>
    <variablelist spacing="compact">
      <varlistentry>
        <term><tag>cache-control</tag></term>
        <listitem>
          <para>The cache-control element is used to tell XQueryURLRewrite if the current URL
            rewrite should be cached. It has a single attribute <literal>cache="yes|no"</literal>.
            Internally, XQueryURLRewrite keeps a map of input URIs to dispatch rules. With the cache
            enabled, the controller XQuery only needs to be executed once for every input URI.
            Subsequent requests will use the cache.</para>
          <para>Watch out: only the URL rewrite rule is cached, not the HTTP response. The
            cache-control setting has nothing to do with the corresponding HTTP cache headers or
            client-side caching within the browser.</para>
        </listitem>
      </varlistentry>
    </variablelist>
    <para>Within an action element, parameters and attributes can be set as follows:</para>
    <variablelist spacing="compact">
      <varlistentry>
        <term><tag>add-parameter</tag></term>
        <listitem>
          <para>Adds (or overwrites) a request parameter. The name of the parameter is taken from
            attribute <literal>name</literal>, the value from attribute <literal>value</literal>.
            The original HTTP request will be copied before the change is applied. Subsequent steps
            in the pipeline will not see the parameter. </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><tag>set-attribute</tag></term>
        <listitem>
          <para>Set a request attribute to the given value. The name of the attribute is read from
            attribute <literal>name</literal>, the value from attribute <literal>value</literal>.
            You can set arbitrary request attributes, for instance to pass information between
            XQueries. Some attributes may be reserved by called servlets.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><tag>clear-attribute</tag></term>
        <listitem>
          <para>Clears a request attribute. The name of the attribute is read from attribute
              <literal>name</literal>. Unlike parameters, request attributes will be visible to
            subsequent steps in the processing pipeline. They need to be cleared once they are no
            longer needed. </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><tag>set-header</tag></term>
        <listitem>
          <para>Sets an HTTP response header field. The HTTP response is shared between all steps in
            the pipeline, so all following steps will be able to see the change.</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </sect1>

  <!-- ================================================================== -->

  <sect1 xml:id="EXTERNAL_RESOURCES">
    <title>Accessing resources not stored in the database</title>

    <para>If your <code>controller.xql</code> is stored in a database collection, all relative
      and/or absolute URIs within the controller will be resolved against the database, not the file
      system. This can be a problem if you need to access common resources, which should be shared
      with other applications residing on the file system or in the database.</para>
    <para>The <tag>forward</tag> directive accepts an optional attribute
        <literal>absolute="yes|no"</literal> to handle this. If one sets
        <literal>absolute="yes"</literal>, an absolute path (starting with a <code>/</code>) in the
        <literal>url</literal> attribute will resolve relative to the current servlet context, not
      the controller context.</para>
    <para>For example, to forward all requests starting with a path <literal>/libs/</literal> to a
      directory within the <literal>webapp</literal> folder of eXist, you can use the following
      snippet:</para>
    <programlisting language="xquery" xlink:href="listings/listing-12.txt"/>
    <para>This simply removes the /libs/ prefix and sets absolute="yes", so the path will be
      resolved relative to the main context of the servlet engine, usually /exist/. In your HTML,
      you can now write:</para>
    <programlisting language="xml">&lt;script type="text/javascript" src="/libs/scripts/jquery/jquery-1.7.1.min.js"&gt;&lt;/script&gt;</programlisting>
    <para>This will locate the jquery file in <literal>webapp/scripts/jquery/...</literal>, even if
      the rest of your application is stored in the db and not on the file system.</para>
  </sect1>

  <!-- ================================================================== -->

  <sect1>
    <title>Special Attributes Accepted by eXist Servlets</title>

    <para>eXist's <code>XQueryServlet</code> as well as the <code>XSLTServlet</code> will listen to
      a few predefined request attributes. The names of these attributes are listed below and should
      not be used for other purposes.</para>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

    <sect2>
      <title>XQueryServlet</title>

      <variablelist spacing="compact">
        <varlistentry>
          <term><code>xquery.attribute</code></term>
          <listitem>
            <para>Contains the name of a request attribute. Instead of writing query results to the
              response output stream, XQueryServlet will store them into the named attribute. The
              value of the attribute will be an XQuery Sequence
                (<literal>org.exist.xquery.Sequence</literal>). If no query results were returned,
              the attribute will contain an empty sequence.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><code>xquery.source</code></term>
          <listitem>
            <para>If set, the value of this attribute must contain the XQuery code to execute.
              Normally, <code>XQueryServlet</code> reads the XQuery from the file given in the
              request path. <literal>xquery.source</literal> is a way to overwrite this behaviour,
              e.g. if you want to evaluate an XQuery which was generated within the
              controller.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><code>xquery.module-load-path</code></term>
          <listitem>
            <para>The path which will be used for locating modules. This is only relevant in
              combination with <literal>xquery.source</literal> and tells the XQuery engine where to
              look for modules imported by the query. For example, if you stored required modules
              into the database collection <literal>/db/test</literal>, you can set
                <literal>xquery.module-load-path</literal> to <code>xmldb:exist:///db/test</code>.
              If the query contains an expression:</para>
            <programlisting language="xquery">import module namespace test="http://exist-db.org/test" at "test.xql";</programlisting>
            <para>the XQuery engine will try to find the module <literal>test.xql</literal> in the
              filesystem by default, which is not what you want. Setting
                <literal>xquery.module-load-path</literal> fixes this.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><code>xquery.report-errors</code></term>
          <listitem>
            <para>If set to <code>yes</code>, an error in the XQuery will not result in an HTTP
              error. Instead, the string message of the error is enclosed in an element
                <tag>error</tag> which is then written to the response stream. The HTTP status is
              not changed.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

    <sect2>
      <title>XSLTServlet</title>

      <variablelist spacing="compact">
        <varlistentry>
          <term><code>xslt.stylesheet</code></term>
          <listitem>
            <para>The path to the XSL stylesheet. Relative paths will be resolved against the
              current request URI, absolute paths against the context of the web application
              (/exist). To reference a stylesheet which is stored in the database, use an XML:DB URI
              like <literal>xmldb:exist:///db/styles/myxsl.xsl</literal>.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><code>xslt.input</code></term>
          <listitem>
            <para>Contains the name of a request attribute from which the input to the
              transformation process should be taken. The input has to be a valid eXist XQuery
              sequence.</para>
            <para>This attribute is usually combined with <literal>xquery.attribute</literal>
              provided by <code>XQueryServlet</code> and allows passing data between the two without
              additional serialization/parsing overhead.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><code>xslt.user</code></term>
          <listitem>
            <para>The name of the eXist user to read and apply the stylesheet.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><code>xslt.password</code></term>
          <listitem>
            <para>Password for the user given in <literal>xslt.user</literal>
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para><code>XSLTServlet</code> will attempt to map all other request attributes starting with
        the prefix <literal>xslt.</literal> into <emphasis>stylesheet parameters</emphasis>. So, for
        example, if you set a request attribute <literal>xslt.myattr</literal> it will be available
        within the stylesheet as parameter <literal>$xslt.myattr</literal>. For security reasons,
        this is the only way to pass request parameters into the stylesheet: use the controller
        query to transform the request parameter into a request attribute and pass that to the
        view.</para>
      <para>However, depending on the XSLT engine used, automatic conversion of types between
        eXist/Java and the XSLT processor may not always work. Best to limit your attribute values
        to strings.</para>
    </sect2>
  </sect1>
</article>
