<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id$ -->
<book>
    <bookinfo>
        <productname>eXist-db – Open Source Native XML Database</productname>
        <title>Upgrade Guide</title>
        <date>November 2009</date>
        <author>
            <firstname>Wolfgang M.</firstname>
            <surname>Meier</surname>
            <affiliation>
                <address format="linespecific">
                    <email>wolfgang at exist-db.org</email>
                </address>
            </affiliation>
        </author>
    </bookinfo>
    <chapter>
        <title>Upgrade Guide</title>
        <section id="overview">
            <title>Overview</title>
            <para>This article explains the best practices for upgrading eXist-db. It introduces key concepts and provides instructions for different types of upgrades. Following these instructions will ensure your data is properly backed up and preserved during the upgrade process.</para>
        </section>
        <section id="key-concepts">
            <title>Key concepts</title>
            <para>The primary goal of an eXist upgrade is to migrate your eXist application to a new version while preserving the contents of your database.</para>
            <para>Before embarking on an upgrade, you should first review the new version's release notes (see the <ulink url="http://exist-db.org/exist/apps/wiki/blogs/eXist/">eXist Developer's Blog</ulink> for an archive of all past release notes). The release notes introduce the new version's new features, improvements, and bug fixes, but they also outline any new requirements (e.g., the required version of Java). For the purpose of this guide, the most important item in the release notes is whether the new version is <emphasis>binary-compatible</emphasis> with the previous version or not. Pay close attention to these notes, as they will tell you which upgrade route to follow here.</para>
            <para>If a new version is binary-compatible with the previous version, it means that the format eXist uses to store the contents of the database has not changed, so the data can be used by new version without modification. However, if a new version is not binary-compatible, then it means that the new version of eXist has changed the way it reads data from or stores data into the database. As a result, some additional steps are required to migrate your data to the new version of eXist.</para>
            <para>You should always back up your data before upgrading to any new version of eXist; the directions below indicate when and how to perform a backup. Why is backing up data important before an upgrade? Of course, upgrade procedures are tested with each release, but as with any software upgrade, unexpected events can occur, so these procedures give you a backup of your data that you can revert to with your previous version of eXist and resume work.</para>
            <para>For the same reason, you should not install the new version of eXist over the previous version. Instead, these instructions have you install the new version into a fresh new directory.</para>
        </section>
        <section id="binary-compatible-upgrades">
            <title>Binary Compatible Upgrades</title>
            <para>Follow these steps if the new version of eXist is binary-compatible with the your old version. Check the new version's release notes to find out whether it is binary compatibility with your old version.</para>
            <procedure>
                <step>
                    <para>Stop the old installation of eXist, if it is running.</para>
                </step>
                <step>
                    <para>Create a <ulink url="backup.xml">backup</ulink> of the data from your old installation of eXist.</para>
                </step>
                <step>
                    <para>Install the new version of eXist. Do not install one eXist version over another one. Always install the new version into a fresh new directory.</para>
                </step>
                <step>
                    <para>Remove the <emphasis>empty</emphasis> <code>data</code> directory from the new installation. Typically the data directory is located in <code>webapp/WEB-INF/data</code>.<!-- TODO Add fool-proof procedures for locating your data directory for different installations. For example, macOS  users who install eXist via disk image installer need to look in ~/Library/Application Support/org.exist/ - JCW --></para>
                </step>
                <step>
                    <para>Copy the entire data directory of the old version into the corresponding location of the new version.</para>
                </step>
                <step>
                    <para>Start the new eXist instance.</para>
                </step>
                <step>
                    <para>Check the eXist log for any errors during startup.</para>
                </step>
            </procedure>
        </section>
        <section id="non-binary-compatible-upgrades">
            <title>Non-binary-compatible Upgrades</title>
            <para>Follow these steps if the new version of eXist is not binary-compatible with the your old version. (Check the new version's release notes to find out whether it is binary compatibility with your old version.) Additional steps are required when upgrading to a new version of eXist whose database format is not binary-compatible with your old installation. The key difference is that you must perform a <emphasis>full restore</emphasis> of your backed up data onto the new installation of eXist, rather than simply copying the data directory to the new installation.</para>
            <procedure>
                <step>
                    <para>Create a backup of the data from old installation of eXist. The recommended approach is to perform a <ulink url="backup.xml#D2.4.10">server-side backup</ulink>. This can be done in a number of ways: <orderedlist>
                        <listitem>
                            <para>Use the Dashboard's Backup utility (check "Zip" in the dialog)</para>
                        </listitem>
                        <listitem>
                            <para>Use the ExportGUI on the command line:</para> 
                            <programlisting language="shell">java -jar start.jar -Xmx2048m org.exist.backup.ExportGUI</programlisting>
                        </listitem>
                        <listitem>
                            <para>Use the ExportMain on the command line:</para>
                            <programlisting language="shell">java -jar start.jar org.exist.backup.ExportMain -x -z</programlisting>
                        </listitem>
                        <listitem>
                            <para>Trigger a ConsistencyCheckTask via XQuery:</para>
                            <programlisting language="xquery"><![CDATA[system:trigger-system-task("org.exist.storage.ConsistencyCheckTask",
    <parameters>
        <param name="backup" value="yes"/>
        <param name="output" value="export"/>
    </parameters>)]]></programlisting>
                        </listitem>
                    </orderedlist></para>
                    <para>Where do these various methods store their resulting backups? The Dashboard's Backup utility and the ConsistencyCheckTask will write backups into a directory called <code>export</code> located inside the data directory of the eXist instance. The ExportMain writes into <code>$EXIST_HOME/export</code> unless configured otherwise.</para>
                    <para>All of the above methods basically work the same: they first run a consistency check on the database, trying to identify potential issues in the internal storage structure. Based on the result of the check, they attempt to rescue as much data as possible, working around any detected issues.</para>
                    <para>Besides the backup file, the export will also generate a report. Normally this just contains the list of collections which were backed up. Review this report. If you see any warnings or errors, it is especially important that you perform a “full restore” of your backed-up data onto the new installation of eXist, as described in the following steps.<!-- TODO: This suggests that a restore will fix errors identified during the backup. Is this true? -JW --></para>
                </step>
                <step>
                    <para>Stop the old installation of eXist.</para>
                </step>
                <step>
                    <para>Install the new version of eXist. (Again, do not install one eXist version over another one. Always install the new version into a fresh new directory.)</para>
                </step>
                <step>
                    <para>Perform a full <ulink url="backup.xml#restore">restore</ulink> of the backup onto the new version of eXist.</para>
                </step>
            </procedure>
        </section>
    </chapter>
</book>
