<?xml-model href="http://docbook.org/xml/5.0/rng/docbook.rng"
        schematypens="http://relaxng.org/ns/structure/1.0"?><?xml-model href="http://docbook.org/xml/5.0/rng/docbook.rng" type="application/xml"
        schematypens="http://purl.oclc.org/dsdl/schematron"?>
<article version="5.0" xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink">
    <info>
        <title>Versioning Extensions</title>
        <date>2Q19</date>
        <keywordset>
            <keyword>application-development</keyword>
        </keywordset>
    </info>

    <!-- ================================================================== -->


    <para>eXist-db provides a basic document versioning extension. This extension tracks all changes
        to a document by storing the differences between the revisions. Older versions can be
        restored on the fly and even queried in memory. There's also basic support to detect and
        intercept conflicting writes.</para>
    <para>The versioning extension was created with human editors in mind. These will typically
        change documents through an editor or some form-based front-end. It should work well with
        documents up to several megabytes in size. </para>
    <note>
        <para>eXist-db has no control over the client. It does not know where a document update
            comes from and cannot directly communicate with the user. The versioning extension
            should therefore be seen more like a toolbox than a complete solution. Advanced
            functionality (merging, conflict resolution, etc.) will require support from the
            end-user applications.</para>
    </note>
    <warning>
        <para>The versioning will not track machine-generated node-level edits using XUpdate or
            XQuery update extensions.</para>
    </warning>

    <!-- ================================================================== -->

    <sect1 xml:id="versioning-components">
        <title>Components</title>

        <para>The versioning extensions has the following components:</para>
        <variablelist spacing="compact">
            <varlistentry>
                <term><code>VersioningTrigger</code></term>
                <listitem>
                    <para>A trigger (to be registered with a collection) that implements the core
                        versioning functionality</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><code>VersioningFilter</code></term>
                <listitem>
                    <para>A serialization filter which adds special version attributes to every
                        document. These attributes are used to detect conflicting writes.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term> <literal>versioning.xqm</literal> </term>
                <listitem>
                    <para>An XQuery module which provides a function library for end-user
                        applications, including functions like <code>v:doc</code> (restore a given
                        revision on the fly).</para>
                </listitem>
            </varlistentry>
        </variablelist>
    </sect1>

    <!-- ================================================================== -->

    <sect1 xml:id="setup">
        <title>Setup</title>

        <para>Versioning can be enabled for separate collections in the collection hierarchy. To
            enable versioning, a trigger must be registered with the top-level collection. This is
            done through the same collection configuration files, <code>collection.xconf</code>,
            that are used for defining indexes.</para>

        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

        <sect2 xml:id="register">
            <title>Register the versioning trigger</title>

            <para>To enable versioning for a collection, you have to edit the collection's
                <literal>collection.xconf</literal> configuration file. This file must be stored
                below the <literal>/db/system/config</literal> collection. As described in the <link
                xlink:href="indexing">Configuring Indexes</link> document, the
                <literal>/db/system/config</literal> collection mirrors the hierarchical structure
                of the main collection tree.</para>
            <para>Within <literal>collection.xconf</literal>, you must register the trigger class
                <literal>org.exist.versioning.VersioningTrigger</literal> for the
                <code>create</code>, <code>update</code>, <code>delete</code>, <code>copy</code> and
                <code>move</code> events:</para>
            <programlisting language="xml" xlink:href="listings/listing-1.xml"/>

            <para>If you store above document into
                <literal>/db/system/config/db/collection.xconf</literal>, it will enable versioning
                for the entire database.</para>
            <warning>
                <para>A <literal>collection.xconf</literal> at a lower level in the hierarchy will
                    <emphasis>overwrite</emphasis> any configuration on higher levels, including
                    these trigger definitions. Triggers are not inherited from ancestor
                    configurations. If the new configuration doesn't define a trigger, the trigger
                    map will be empty.</para>
                <para>When working with nested collection configurations, you need to make sure that
                    the trigger definitions are present in all <literal>collection.xconf</literal>
                    files.</para>
            </warning>
            <para><code>VersioningTrigger</code> accepts one parameter,
                <literal>overwrite</literal>: if this is set to <code>no</code>, the trigger will
                check for potential write conflicts. For example, if two users opened the same
                document and are editing it, it may happen that the first user saves his changes
                without the second user recognizing it. The second user also made changes and if
                eXist did allow him to store his version, he would just overwrite the modifications
                already committed by the first user.</para>
            <para>The <literal>overwrite="no"</literal> setting prevents this. However, eXist has no
                control over the client. It does not know where the conflicting document came from.
                All it can do is reject the write attempt and raise an error. The error should then
                be handled by the client. Right now there are no clients to support this. More work
                will be required in this area. However, clients can already use the supplied XQuery
                functions to check for write conflicts (see below).</para>
        </sect2>

        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

        <sect2 xml:id="enable">
            <title>Enabling the serialization filter</title>

            <para>In order to detect conflicting writes, the versioning extension needs to keep
                track of the base revision to which changes were applied. It does this by inserting
                special metadata attributes into a document when it is retrieved from the database.
                For this purpose, a <emphasis>custom filter</emphasis> has to be registered with
                eXist's serializer. </para>
            <para>This is done in the <tag>serializer</tag> section in the main configuration file,
                <literal>conf.xml</literal>. Add a <tag>custom-filter</tag> child tag to the
                <tag>serializer</tag> element and set its <literal>class</literal> attribute to
                <literal>org.exist.versioning.VersioningFilter</literal>:</para>
            <programlisting language="xml" xlink:href="listings/listing-2.xml"/>
            <para>eXist must be restarted for the versioning filter to become active.</para>
        </sect2>
    </sect1>


    <!-- ================================================================== -->

    <sect1 xml:id="access">
        <title>Accessing the versioning information</title>

        <para>The versioning extension uses the collection <literal>/db/system/versions</literal> to
            store base revisions and differences. The collection hierarchy below
            <literal>/db/system/versions</literal> mirrors the main collection tree. For each
            versioned resource, you'll find a document with suffix <literal>.base</literal>, which
            contains the base revision (the first version of the document). Each revision is stored
            in a document which starts with the original document name and ends with the revision
            number, for instance <literal>hamlet.xml.35</literal>.</para>

        <para>eXist provides an XQuery module to access the revision history or restore a given
            revision. For example, to view the history of a resource:</para>
        <programlisting language="xquery" xlink:href="listings/listing-3.txt"/>
        <para>This returns an XML fragment like this:</para>
        <programlisting language="xml" xlink:href="listings/listing-4.txt"/>
        <para>The most important function is <literal>v:doc</literal>, which is used to restore an
            arbitrary revision of a document on the fly. You can use this function similar to the
            standard <literal>fn:doc</literal> to query the revision. For example:</para>
        <programlisting language="xquery" xlink:href="listings/listing-5.txt"/>
        <para>This will restore revision 35 of <literal>hamlet.xml</literal> and then find all
            <tag>SPEECH</tag> elements with a <tag>SPEAKER</tag> called "HAMLET". No indexes are
            available to the query engine when processing a restore document.</para>
    </sect1>

    <!-- ================================================================== -->

    <sect1 xml:id="detect">
        <title>Detecting write conflicts</title>

        <para>To avoid a user overwriting the changes made by another user, eXist needs to know upon
            which revision the user's changes are based. To make this possible, the versioning
            filter adds a number of metadata attributes to the root element of a document when it is
            serialized (for instance when opening it in an editor). The inserted metadata attributes
            are all in a separate versioning namespace and will never be stored in the database. The
            following fragment shows the added attributes:</para>
        <programlisting language="xml" xlink:href="listings/listing-6.xml"/>
        <para>When eXist detects a potential write conflict, it cannot do more than reject the
            update and raise an error. However, there's an XQuery function to check if newer
            revisions exist. You pass it the revision number and the unique key as given in the
            versioning attributes of the document root element. If the function returns the empty
            sequence, no newer revisions exist in the database. Otherwise, the function returns the
            version documents for each newer revision. </para>
        <programlisting language="xquery" xlink:href="listings/listing-7.txt"/>
        <para>Once you made sure that you really want to store the document and overwrite any
            revisions, simply remove the version attributes from the root element.</para>

    </sect1>
</article>
